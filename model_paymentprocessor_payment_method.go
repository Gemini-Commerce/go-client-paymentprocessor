/*
Payment Processor Service

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paymentprocessor

import (
	"encoding/json"
	"fmt"
)

// checks if the PaymentprocessorPaymentMethod type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaymentprocessorPaymentMethod{}

// PaymentprocessorPaymentMethod struct for PaymentprocessorPaymentMethod
type PaymentprocessorPaymentMethod struct {
	Code string `json:"code"`
	Title PaymentprocessorLocalizedText `json:"title"`
	Label *PaymentprocessorLocalizedText `json:"label,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	Amount *PaymentprocessorMoney `json:"amount,omitempty"`
	Currency *PaymentprocessorCurrency `json:"currency,omitempty"`
	AdditionalInfo *string `json:"additionalInfo,omitempty"`
	IsUpfront *bool `json:"isUpfront,omitempty"`
	Description *PaymentprocessorLocalizedText `json:"description,omitempty"`
	Restrictions []PaymentprocessorPaymentMethodRestriction `json:"restrictions,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PaymentprocessorPaymentMethod PaymentprocessorPaymentMethod

// NewPaymentprocessorPaymentMethod instantiates a new PaymentprocessorPaymentMethod object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentprocessorPaymentMethod(code string, title PaymentprocessorLocalizedText) *PaymentprocessorPaymentMethod {
	this := PaymentprocessorPaymentMethod{}
	this.Code = code
	this.Title = title
	var currency PaymentprocessorCurrency = PAYMENTPROCESSORCURRENCY_XXX
	this.Currency = &currency
	return &this
}

// NewPaymentprocessorPaymentMethodWithDefaults instantiates a new PaymentprocessorPaymentMethod object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentprocessorPaymentMethodWithDefaults() *PaymentprocessorPaymentMethod {
	this := PaymentprocessorPaymentMethod{}
	var currency PaymentprocessorCurrency = PAYMENTPROCESSORCURRENCY_XXX
	this.Currency = &currency
	return &this
}

// GetCode returns the Code field value
func (o *PaymentprocessorPaymentMethod) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *PaymentprocessorPaymentMethod) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *PaymentprocessorPaymentMethod) SetCode(v string) {
	o.Code = v
}

// GetTitle returns the Title field value
func (o *PaymentprocessorPaymentMethod) GetTitle() PaymentprocessorLocalizedText {
	if o == nil {
		var ret PaymentprocessorLocalizedText
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *PaymentprocessorPaymentMethod) GetTitleOk() (*PaymentprocessorLocalizedText, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *PaymentprocessorPaymentMethod) SetTitle(v PaymentprocessorLocalizedText) {
	o.Title = v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *PaymentprocessorPaymentMethod) GetLabel() PaymentprocessorLocalizedText {
	if o == nil || IsNil(o.Label) {
		var ret PaymentprocessorLocalizedText
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentprocessorPaymentMethod) GetLabelOk() (*PaymentprocessorLocalizedText, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *PaymentprocessorPaymentMethod) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given PaymentprocessorLocalizedText and assigns it to the Label field.
func (o *PaymentprocessorPaymentMethod) SetLabel(v PaymentprocessorLocalizedText) {
	o.Label = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *PaymentprocessorPaymentMethod) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentprocessorPaymentMethod) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *PaymentprocessorPaymentMethod) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *PaymentprocessorPaymentMethod) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *PaymentprocessorPaymentMethod) GetAmount() PaymentprocessorMoney {
	if o == nil || IsNil(o.Amount) {
		var ret PaymentprocessorMoney
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentprocessorPaymentMethod) GetAmountOk() (*PaymentprocessorMoney, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *PaymentprocessorPaymentMethod) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given PaymentprocessorMoney and assigns it to the Amount field.
func (o *PaymentprocessorPaymentMethod) SetAmount(v PaymentprocessorMoney) {
	o.Amount = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *PaymentprocessorPaymentMethod) GetCurrency() PaymentprocessorCurrency {
	if o == nil || IsNil(o.Currency) {
		var ret PaymentprocessorCurrency
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentprocessorPaymentMethod) GetCurrencyOk() (*PaymentprocessorCurrency, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *PaymentprocessorPaymentMethod) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given PaymentprocessorCurrency and assigns it to the Currency field.
func (o *PaymentprocessorPaymentMethod) SetCurrency(v PaymentprocessorCurrency) {
	o.Currency = &v
}

// GetAdditionalInfo returns the AdditionalInfo field value if set, zero value otherwise.
func (o *PaymentprocessorPaymentMethod) GetAdditionalInfo() string {
	if o == nil || IsNil(o.AdditionalInfo) {
		var ret string
		return ret
	}
	return *o.AdditionalInfo
}

// GetAdditionalInfoOk returns a tuple with the AdditionalInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentprocessorPaymentMethod) GetAdditionalInfoOk() (*string, bool) {
	if o == nil || IsNil(o.AdditionalInfo) {
		return nil, false
	}
	return o.AdditionalInfo, true
}

// HasAdditionalInfo returns a boolean if a field has been set.
func (o *PaymentprocessorPaymentMethod) HasAdditionalInfo() bool {
	if o != nil && !IsNil(o.AdditionalInfo) {
		return true
	}

	return false
}

// SetAdditionalInfo gets a reference to the given string and assigns it to the AdditionalInfo field.
func (o *PaymentprocessorPaymentMethod) SetAdditionalInfo(v string) {
	o.AdditionalInfo = &v
}

// GetIsUpfront returns the IsUpfront field value if set, zero value otherwise.
func (o *PaymentprocessorPaymentMethod) GetIsUpfront() bool {
	if o == nil || IsNil(o.IsUpfront) {
		var ret bool
		return ret
	}
	return *o.IsUpfront
}

// GetIsUpfrontOk returns a tuple with the IsUpfront field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentprocessorPaymentMethod) GetIsUpfrontOk() (*bool, bool) {
	if o == nil || IsNil(o.IsUpfront) {
		return nil, false
	}
	return o.IsUpfront, true
}

// HasIsUpfront returns a boolean if a field has been set.
func (o *PaymentprocessorPaymentMethod) HasIsUpfront() bool {
	if o != nil && !IsNil(o.IsUpfront) {
		return true
	}

	return false
}

// SetIsUpfront gets a reference to the given bool and assigns it to the IsUpfront field.
func (o *PaymentprocessorPaymentMethod) SetIsUpfront(v bool) {
	o.IsUpfront = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PaymentprocessorPaymentMethod) GetDescription() PaymentprocessorLocalizedText {
	if o == nil || IsNil(o.Description) {
		var ret PaymentprocessorLocalizedText
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentprocessorPaymentMethod) GetDescriptionOk() (*PaymentprocessorLocalizedText, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PaymentprocessorPaymentMethod) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given PaymentprocessorLocalizedText and assigns it to the Description field.
func (o *PaymentprocessorPaymentMethod) SetDescription(v PaymentprocessorLocalizedText) {
	o.Description = &v
}

// GetRestrictions returns the Restrictions field value if set, zero value otherwise.
func (o *PaymentprocessorPaymentMethod) GetRestrictions() []PaymentprocessorPaymentMethodRestriction {
	if o == nil || IsNil(o.Restrictions) {
		var ret []PaymentprocessorPaymentMethodRestriction
		return ret
	}
	return o.Restrictions
}

// GetRestrictionsOk returns a tuple with the Restrictions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentprocessorPaymentMethod) GetRestrictionsOk() ([]PaymentprocessorPaymentMethodRestriction, bool) {
	if o == nil || IsNil(o.Restrictions) {
		return nil, false
	}
	return o.Restrictions, true
}

// HasRestrictions returns a boolean if a field has been set.
func (o *PaymentprocessorPaymentMethod) HasRestrictions() bool {
	if o != nil && !IsNil(o.Restrictions) {
		return true
	}

	return false
}

// SetRestrictions gets a reference to the given []PaymentprocessorPaymentMethodRestriction and assigns it to the Restrictions field.
func (o *PaymentprocessorPaymentMethod) SetRestrictions(v []PaymentprocessorPaymentMethodRestriction) {
	o.Restrictions = v
}

func (o PaymentprocessorPaymentMethod) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaymentprocessorPaymentMethod) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["code"] = o.Code
	toSerialize["title"] = o.Title
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.AdditionalInfo) {
		toSerialize["additionalInfo"] = o.AdditionalInfo
	}
	if !IsNil(o.IsUpfront) {
		toSerialize["isUpfront"] = o.IsUpfront
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Restrictions) {
		toSerialize["restrictions"] = o.Restrictions
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PaymentprocessorPaymentMethod) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"code",
		"title",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPaymentprocessorPaymentMethod := _PaymentprocessorPaymentMethod{}

	err = json.Unmarshal(data, &varPaymentprocessorPaymentMethod)

	if err != nil {
		return err
	}

	*o = PaymentprocessorPaymentMethod(varPaymentprocessorPaymentMethod)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "code")
		delete(additionalProperties, "title")
		delete(additionalProperties, "label")
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "amount")
		delete(additionalProperties, "currency")
		delete(additionalProperties, "additionalInfo")
		delete(additionalProperties, "isUpfront")
		delete(additionalProperties, "description")
		delete(additionalProperties, "restrictions")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *PaymentprocessorPaymentMethod) GetValue() interface{} {
	if o == nil || IsNil(o.Type) || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}
// SetValue populate the value of well-known types
func (o *PaymentprocessorPaymentMethod) SetValue(value interface{}) {
	if o == nil || IsNil(o.Type) || IsNil(value) {
		return
	}
    if IsNil(o.AdditionalProperties) {
        o.AdditionalProperties = map[string]interface{}{}
    }
	o.AdditionalProperties["value"] = value
	return
}
type NullablePaymentprocessorPaymentMethod struct {
	value *PaymentprocessorPaymentMethod
	isSet bool
}

func (v NullablePaymentprocessorPaymentMethod) Get() *PaymentprocessorPaymentMethod {
	return v.value
}

func (v *NullablePaymentprocessorPaymentMethod) Set(val *PaymentprocessorPaymentMethod) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentprocessorPaymentMethod) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentprocessorPaymentMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentprocessorPaymentMethod(val *PaymentprocessorPaymentMethod) *NullablePaymentprocessorPaymentMethod {
	return &NullablePaymentprocessorPaymentMethod{value: val, isSet: true}
}

func (v NullablePaymentprocessorPaymentMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentprocessorPaymentMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


