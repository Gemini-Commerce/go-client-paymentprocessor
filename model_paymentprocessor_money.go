/*
Payment Processor Service

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paymentprocessor

import (
	"encoding/json"
)

// checks if the PaymentprocessorMoney type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaymentprocessorMoney{}

// PaymentprocessorMoney struct for PaymentprocessorMoney
type PaymentprocessorMoney struct {
	// The whole units of the amount. For example if `currencyCode` is `\"USD\"`, then 1 unit is one US dollar.
	Units *string `json:"units,omitempty"`
	// Number of micro (10^-6) units of the amount. The value must be between -999,999 and +999,999 inclusive. If `units` is positive, `micros` must be positive or zero. If `units` is zero, `micros` can be positive, zero, or negative. If `units` is negative, `micros` must be negative or zero. For example $-1.75 is represented as `units`=-1 and `micros`=-750,000.
	Micros *int32 `json:"micros,omitempty"`
}

// NewPaymentprocessorMoney instantiates a new PaymentprocessorMoney object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentprocessorMoney() *PaymentprocessorMoney {
	this := PaymentprocessorMoney{}
	return &this
}

// NewPaymentprocessorMoneyWithDefaults instantiates a new PaymentprocessorMoney object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentprocessorMoneyWithDefaults() *PaymentprocessorMoney {
	this := PaymentprocessorMoney{}
	return &this
}

// GetUnits returns the Units field value if set, zero value otherwise.
func (o *PaymentprocessorMoney) GetUnits() string {
	if o == nil || IsNil(o.Units) {
		var ret string
		return ret
	}
	return *o.Units
}

// GetUnitsOk returns a tuple with the Units field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentprocessorMoney) GetUnitsOk() (*string, bool) {
	if o == nil || IsNil(o.Units) {
		return nil, false
	}
	return o.Units, true
}

// HasUnits returns a boolean if a field has been set.
func (o *PaymentprocessorMoney) HasUnits() bool {
	if o != nil && !IsNil(o.Units) {
		return true
	}

	return false
}

// SetUnits gets a reference to the given string and assigns it to the Units field.
func (o *PaymentprocessorMoney) SetUnits(v string) {
	o.Units = &v
}

// GetMicros returns the Micros field value if set, zero value otherwise.
func (o *PaymentprocessorMoney) GetMicros() int32 {
	if o == nil || IsNil(o.Micros) {
		var ret int32
		return ret
	}
	return *o.Micros
}

// GetMicrosOk returns a tuple with the Micros field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentprocessorMoney) GetMicrosOk() (*int32, bool) {
	if o == nil || IsNil(o.Micros) {
		return nil, false
	}
	return o.Micros, true
}

// HasMicros returns a boolean if a field has been set.
func (o *PaymentprocessorMoney) HasMicros() bool {
	if o != nil && !IsNil(o.Micros) {
		return true
	}

	return false
}

// SetMicros gets a reference to the given int32 and assigns it to the Micros field.
func (o *PaymentprocessorMoney) SetMicros(v int32) {
	o.Micros = &v
}

func (o PaymentprocessorMoney) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaymentprocessorMoney) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Units) {
		toSerialize["units"] = o.Units
	}
	if !IsNil(o.Micros) {
		toSerialize["micros"] = o.Micros
	}
	return toSerialize, nil
}

type NullablePaymentprocessorMoney struct {
	value *PaymentprocessorMoney
	isSet bool
}

func (v NullablePaymentprocessorMoney) Get() *PaymentprocessorMoney {
	return v.value
}

func (v *NullablePaymentprocessorMoney) Set(val *PaymentprocessorMoney) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentprocessorMoney) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentprocessorMoney) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentprocessorMoney(val *PaymentprocessorMoney) *NullablePaymentprocessorMoney {
	return &NullablePaymentprocessorMoney{value: val, isSet: true}
}

func (v NullablePaymentprocessorMoney) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentprocessorMoney) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


