/*
Payment Processor Service

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paymentprocessor

import (
	"encoding/json"
	"fmt"
)

// PaymentprocessorTransactionType the model 'PaymentprocessorTransactionType'
type PaymentprocessorTransactionType string

// List of paymentprocessorTransactionType
const (
	UNKNOWN PaymentprocessorTransactionType = "UNKNOWN"
	AUTHORIZATION PaymentprocessorTransactionType = "AUTHORIZATION"
	CAPTURE PaymentprocessorTransactionType = "CAPTURE"
	SALE PaymentprocessorTransactionType = "SALE"
	REFUND PaymentprocessorTransactionType = "REFUND"
	VOID PaymentprocessorTransactionType = "VOID"
	FAILED PaymentprocessorTransactionType = "FAILED"
	PENDING PaymentprocessorTransactionType = "PENDING"
	FRAUD PaymentprocessorTransactionType = "FRAUD"
)

// All allowed values of PaymentprocessorTransactionType enum
var AllowedPaymentprocessorTransactionTypeEnumValues = []PaymentprocessorTransactionType{
	"UNKNOWN",
	"AUTHORIZATION",
	"CAPTURE",
	"SALE",
	"REFUND",
	"VOID",
	"FAILED",
	"PENDING",
	"FRAUD",
}

func (v *PaymentprocessorTransactionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PaymentprocessorTransactionType(value)
	for _, existing := range AllowedPaymentprocessorTransactionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PaymentprocessorTransactionType", value)
}

// NewPaymentprocessorTransactionTypeFromValue returns a pointer to a valid PaymentprocessorTransactionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPaymentprocessorTransactionTypeFromValue(v string) (*PaymentprocessorTransactionType, error) {
	ev := PaymentprocessorTransactionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PaymentprocessorTransactionType: valid values are %v", v, AllowedPaymentprocessorTransactionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PaymentprocessorTransactionType) IsValid() bool {
	for _, existing := range AllowedPaymentprocessorTransactionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to paymentprocessorTransactionType value
func (v PaymentprocessorTransactionType) Ptr() *PaymentprocessorTransactionType {
	return &v
}

type NullablePaymentprocessorTransactionType struct {
	value *PaymentprocessorTransactionType
	isSet bool
}

func (v NullablePaymentprocessorTransactionType) Get() *PaymentprocessorTransactionType {
	return v.value
}

func (v *NullablePaymentprocessorTransactionType) Set(val *PaymentprocessorTransactionType) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentprocessorTransactionType) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentprocessorTransactionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentprocessorTransactionType(val *PaymentprocessorTransactionType) *NullablePaymentprocessorTransactionType {
	return &NullablePaymentprocessorTransactionType{value: val, isSet: true}
}

func (v NullablePaymentprocessorTransactionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentprocessorTransactionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

