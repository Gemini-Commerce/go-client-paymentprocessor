/*
Payment Processor Service

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paymentprocessor

import (
	"encoding/json"
)

// checks if the PaymentprocessorAvailabilityContext type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaymentprocessorAvailabilityContext{}

// PaymentprocessorAvailabilityContext struct for PaymentprocessorAvailabilityContext
type PaymentprocessorAvailabilityContext struct {
	ShippingAddress *PaymentprocessorAvailabilityContextPostalAddress `json:"shippingAddress,omitempty"`
	BillingAddress *PaymentprocessorAvailabilityContextPostalAddress `json:"billingAddress,omitempty"`
	Customer *AvailabilityContextCustomer `json:"customer,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PaymentprocessorAvailabilityContext PaymentprocessorAvailabilityContext

// NewPaymentprocessorAvailabilityContext instantiates a new PaymentprocessorAvailabilityContext object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentprocessorAvailabilityContext() *PaymentprocessorAvailabilityContext {
	this := PaymentprocessorAvailabilityContext{}
	return &this
}

// NewPaymentprocessorAvailabilityContextWithDefaults instantiates a new PaymentprocessorAvailabilityContext object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentprocessorAvailabilityContextWithDefaults() *PaymentprocessorAvailabilityContext {
	this := PaymentprocessorAvailabilityContext{}
	return &this
}

// GetShippingAddress returns the ShippingAddress field value if set, zero value otherwise.
func (o *PaymentprocessorAvailabilityContext) GetShippingAddress() PaymentprocessorAvailabilityContextPostalAddress {
	if o == nil || IsNil(o.ShippingAddress) {
		var ret PaymentprocessorAvailabilityContextPostalAddress
		return ret
	}
	return *o.ShippingAddress
}

// GetShippingAddressOk returns a tuple with the ShippingAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentprocessorAvailabilityContext) GetShippingAddressOk() (*PaymentprocessorAvailabilityContextPostalAddress, bool) {
	if o == nil || IsNil(o.ShippingAddress) {
		return nil, false
	}
	return o.ShippingAddress, true
}

// HasShippingAddress returns a boolean if a field has been set.
func (o *PaymentprocessorAvailabilityContext) HasShippingAddress() bool {
	if o != nil && !IsNil(o.ShippingAddress) {
		return true
	}

	return false
}

// SetShippingAddress gets a reference to the given PaymentprocessorAvailabilityContextPostalAddress and assigns it to the ShippingAddress field.
func (o *PaymentprocessorAvailabilityContext) SetShippingAddress(v PaymentprocessorAvailabilityContextPostalAddress) {
	o.ShippingAddress = &v
}

// GetBillingAddress returns the BillingAddress field value if set, zero value otherwise.
func (o *PaymentprocessorAvailabilityContext) GetBillingAddress() PaymentprocessorAvailabilityContextPostalAddress {
	if o == nil || IsNil(o.BillingAddress) {
		var ret PaymentprocessorAvailabilityContextPostalAddress
		return ret
	}
	return *o.BillingAddress
}

// GetBillingAddressOk returns a tuple with the BillingAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentprocessorAvailabilityContext) GetBillingAddressOk() (*PaymentprocessorAvailabilityContextPostalAddress, bool) {
	if o == nil || IsNil(o.BillingAddress) {
		return nil, false
	}
	return o.BillingAddress, true
}

// HasBillingAddress returns a boolean if a field has been set.
func (o *PaymentprocessorAvailabilityContext) HasBillingAddress() bool {
	if o != nil && !IsNil(o.BillingAddress) {
		return true
	}

	return false
}

// SetBillingAddress gets a reference to the given PaymentprocessorAvailabilityContextPostalAddress and assigns it to the BillingAddress field.
func (o *PaymentprocessorAvailabilityContext) SetBillingAddress(v PaymentprocessorAvailabilityContextPostalAddress) {
	o.BillingAddress = &v
}

// GetCustomer returns the Customer field value if set, zero value otherwise.
func (o *PaymentprocessorAvailabilityContext) GetCustomer() AvailabilityContextCustomer {
	if o == nil || IsNil(o.Customer) {
		var ret AvailabilityContextCustomer
		return ret
	}
	return *o.Customer
}

// GetCustomerOk returns a tuple with the Customer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentprocessorAvailabilityContext) GetCustomerOk() (*AvailabilityContextCustomer, bool) {
	if o == nil || IsNil(o.Customer) {
		return nil, false
	}
	return o.Customer, true
}

// HasCustomer returns a boolean if a field has been set.
func (o *PaymentprocessorAvailabilityContext) HasCustomer() bool {
	if o != nil && !IsNil(o.Customer) {
		return true
	}

	return false
}

// SetCustomer gets a reference to the given AvailabilityContextCustomer and assigns it to the Customer field.
func (o *PaymentprocessorAvailabilityContext) SetCustomer(v AvailabilityContextCustomer) {
	o.Customer = &v
}

func (o PaymentprocessorAvailabilityContext) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaymentprocessorAvailabilityContext) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ShippingAddress) {
		toSerialize["shippingAddress"] = o.ShippingAddress
	}
	if !IsNil(o.BillingAddress) {
		toSerialize["billingAddress"] = o.BillingAddress
	}
	if !IsNil(o.Customer) {
		toSerialize["customer"] = o.Customer
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PaymentprocessorAvailabilityContext) UnmarshalJSON(data []byte) (err error) {
	varPaymentprocessorAvailabilityContext := _PaymentprocessorAvailabilityContext{}

	err = json.Unmarshal(data, &varPaymentprocessorAvailabilityContext)

	if err != nil {
		return err
	}

	*o = PaymentprocessorAvailabilityContext(varPaymentprocessorAvailabilityContext)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "shippingAddress")
		delete(additionalProperties, "billingAddress")
		delete(additionalProperties, "customer")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *PaymentprocessorAvailabilityContext) GetValue() interface{} {
	if o == nil || IsNil(o.Type) || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}
// SetValue populate the value of well-known types
func (o *PaymentprocessorAvailabilityContext) SetValue(value interface{}) {
	if o == nil || IsNil(o.Type) || IsNil(value) {
		return
	}
    if IsNil(o.AdditionalProperties) {
        o.AdditionalProperties = map[string]interface{}{}
    }
	o.AdditionalProperties["value"] = value
	return
}
type NullablePaymentprocessorAvailabilityContext struct {
	value *PaymentprocessorAvailabilityContext
	isSet bool
}

func (v NullablePaymentprocessorAvailabilityContext) Get() *PaymentprocessorAvailabilityContext {
	return v.value
}

func (v *NullablePaymentprocessorAvailabilityContext) Set(val *PaymentprocessorAvailabilityContext) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentprocessorAvailabilityContext) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentprocessorAvailabilityContext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentprocessorAvailabilityContext(val *PaymentprocessorAvailabilityContext) *NullablePaymentprocessorAvailabilityContext {
	return &NullablePaymentprocessorAvailabilityContext{value: val, isSet: true}
}

func (v NullablePaymentprocessorAvailabilityContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentprocessorAvailabilityContext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


