/*
Payment Processor Service

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paymentprocessor

import (
	"encoding/json"
	"fmt"
)

// ConditionAction the model 'ConditionAction'
type ConditionAction string

// List of ConditionAction
const (
	CONDITIONACTION_DISALLOW ConditionAction = "DISALLOW"
)

// All allowed values of ConditionAction enum
var AllowedConditionActionEnumValues = []ConditionAction{
	"DISALLOW",
}

func (v *ConditionAction) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ConditionAction(value)
	for _, existing := range AllowedConditionActionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ConditionAction", value)
}

// NewConditionActionFromValue returns a pointer to a valid ConditionAction
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewConditionActionFromValue(v string) (*ConditionAction, error) {
	ev := ConditionAction(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ConditionAction: valid values are %v", v, AllowedConditionActionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ConditionAction) IsValid() bool {
	for _, existing := range AllowedConditionActionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ConditionAction value
func (v ConditionAction) Ptr() *ConditionAction {
	return &v
}

type NullableConditionAction struct {
	value *ConditionAction
	isSet bool
}

func (v NullableConditionAction) Get() *ConditionAction {
	return v.value
}

func (v *NullableConditionAction) Set(val *ConditionAction) {
	v.value = val
	v.isSet = true
}

func (v NullableConditionAction) IsSet() bool {
	return v.isSet
}

func (v *NullableConditionAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConditionAction(val *ConditionAction) *NullableConditionAction {
	return &NullableConditionAction{value: val, isSet: true}
}

func (v NullableConditionAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConditionAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

