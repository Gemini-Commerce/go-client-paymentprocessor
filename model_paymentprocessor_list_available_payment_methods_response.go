/*
Payment Processor Service

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package paymentprocessor

import (
	"encoding/json"
)

// checks if the PaymentprocessorListAvailablePaymentMethodsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaymentprocessorListAvailablePaymentMethodsResponse{}

// PaymentprocessorListAvailablePaymentMethodsResponse struct for PaymentprocessorListAvailablePaymentMethodsResponse
type PaymentprocessorListAvailablePaymentMethodsResponse struct {
	Methods []PaymentprocessorPaymentMethod `json:"methods,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PaymentprocessorListAvailablePaymentMethodsResponse PaymentprocessorListAvailablePaymentMethodsResponse

// NewPaymentprocessorListAvailablePaymentMethodsResponse instantiates a new PaymentprocessorListAvailablePaymentMethodsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentprocessorListAvailablePaymentMethodsResponse() *PaymentprocessorListAvailablePaymentMethodsResponse {
	this := PaymentprocessorListAvailablePaymentMethodsResponse{}
	return &this
}

// NewPaymentprocessorListAvailablePaymentMethodsResponseWithDefaults instantiates a new PaymentprocessorListAvailablePaymentMethodsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentprocessorListAvailablePaymentMethodsResponseWithDefaults() *PaymentprocessorListAvailablePaymentMethodsResponse {
	this := PaymentprocessorListAvailablePaymentMethodsResponse{}
	return &this
}

// GetMethods returns the Methods field value if set, zero value otherwise.
func (o *PaymentprocessorListAvailablePaymentMethodsResponse) GetMethods() []PaymentprocessorPaymentMethod {
	if o == nil || IsNil(o.Methods) {
		var ret []PaymentprocessorPaymentMethod
		return ret
	}
	return o.Methods
}

// GetMethodsOk returns a tuple with the Methods field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentprocessorListAvailablePaymentMethodsResponse) GetMethodsOk() ([]PaymentprocessorPaymentMethod, bool) {
	if o == nil || IsNil(o.Methods) {
		return nil, false
	}
	return o.Methods, true
}

// &#39;Has&#39;Methods returns a boolean if a field has been set.
func (o *PaymentprocessorListAvailablePaymentMethodsResponse) &#39;Has&#39;Methods() bool {
	if o != nil && !IsNil(o.Methods) {
		return true
	}

	return false
}

// SetMethods gets a reference to the given []PaymentprocessorPaymentMethod and assigns it to the Methods field.
func (o *PaymentprocessorListAvailablePaymentMethodsResponse) SetMethods(v []PaymentprocessorPaymentMethod) {
	o.Methods = v
}

func (o PaymentprocessorListAvailablePaymentMethodsResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaymentprocessorListAvailablePaymentMethodsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Methods) {
		toSerialize["methods"] = o.Methods
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PaymentprocessorListAvailablePaymentMethodsResponse) UnmarshalJSON(data []byte) (err error) {
	varPaymentprocessorListAvailablePaymentMethodsResponse := _PaymentprocessorListAvailablePaymentMethodsResponse{}

	err = json.Unmarshal(data, &varPaymentprocessorListAvailablePaymentMethodsResponse)

	if err != nil {
		return err
	}

	*o = PaymentprocessorListAvailablePaymentMethodsResponse(varPaymentprocessorListAvailablePaymentMethodsResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "methods")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *PaymentprocessorListAvailablePaymentMethodsResponse) GetValue() interface{} {
	if o == nil || IsNil(o.Type) || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}
// SetValue populate the value of well-known types
func (o *PaymentprocessorListAvailablePaymentMethodsResponse) SetValue(value interface{}) {
	if o == nil || IsNil(o.Type) || IsNil(value) {
		return
	}
    if IsNil(o.AdditionalProperties) {
        o.AdditionalProperties = map[string]interface{}{}
    }
	o.AdditionalProperties["value"] = value
	return
}
type NullablePaymentprocessorListAvailablePaymentMethodsResponse struct {
	value *PaymentprocessorListAvailablePaymentMethodsResponse
	isSet bool
}

func (v NullablePaymentprocessorListAvailablePaymentMethodsResponse) Get() *PaymentprocessorListAvailablePaymentMethodsResponse {
	return v.value
}

func (v *NullablePaymentprocessorListAvailablePaymentMethodsResponse) Set(val *PaymentprocessorListAvailablePaymentMethodsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentprocessorListAvailablePaymentMethodsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentprocessorListAvailablePaymentMethodsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentprocessorListAvailablePaymentMethodsResponse(val *PaymentprocessorListAvailablePaymentMethodsResponse) *NullablePaymentprocessorListAvailablePaymentMethodsResponse {
	return &NullablePaymentprocessorListAvailablePaymentMethodsResponse{value: val, isSet: true}
}

func (v NullablePaymentprocessorListAvailablePaymentMethodsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentprocessorListAvailablePaymentMethodsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


